generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  password       String
  name           String
  role           Role    @default(BUYER)
  stripeAccount  String? @unique
  stripeStatus   String @default("unverified")
  products       Product[]
  orders         Order[]
  reviews        Review[]
  payouts        Payout[]
  favourites     Favourite[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  BUYER
  SELLER
}

model Product {
  id          String  @id @default(cuid())
  title       String
  description String
  price       Float
  fileUrl     String
  sellerId    String
  order      Order[]
  seller      User   @relation(fields: [sellerId], references: [id])
  reviews     Review[]
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  products  Product[]
}


model Order {
  id         String  @id @default(cuid())
  sellerId  String @default("null")
  buyerId    String
  buyer      User   @relation(fields: [buyerId], references: [id])
  productId  String
  product  Product  @relation(fields: [productId], references: [id])
  refundId   String?
  refund     Refund?
  amount     Float
  status     OrderStatus @default(PENDING)
  checkoutSessionId String?    @unique
  paymentUrl       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Favourite {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  productId  String
  createdAt  DateTime @default(now())
}


enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
  REFUNDED
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  comment   String?
  buyerId   String
  buyer     User   @relation(fields: [buyerId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model WebhookEvent {
  id         String  @id @default(cuid())
  eventType  String
  payload    Json
  processed  Boolean @default(false)
  createdAt  DateTime @default(now())
}

model Payout {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  amount     Float
  stripePayoutId String
  status     PayoutStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Refund {
  id         String  @id @default(cuid())
  orderId    String @unique
  order      Order   @relation(fields: [orderId], references: [id])
  amount     Float
  status  RefundStatus @default(PENDING)
  reason     String
  createdAt  DateTime @default(now())
}

enum RefundStatus {
  PENDING
  CREATED
  FAILED
  COMPLETED
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}